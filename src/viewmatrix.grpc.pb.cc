// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: viewmatrix.proto

#include "viewmatrix.pb.h"
#include "viewmatrix.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace viewmatrix {

static const char* ViewTrans_method_names[] = {
  "/viewmatrix.ViewTrans/GetViewMatrix",
};

std::unique_ptr< ViewTrans::Stub> ViewTrans::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ViewTrans::Stub> stub(new ViewTrans::Stub(channel));
  return stub;
}

ViewTrans::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetViewMatrix_(ViewTrans_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ViewTrans::Stub::GetViewMatrix(::grpc::ClientContext* context, const ::viewmatrix::Request& request, ::viewmatrix::Matrix* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetViewMatrix_, context, request, response);
}

void ViewTrans::Stub::experimental_async::GetViewMatrix(::grpc::ClientContext* context, const ::viewmatrix::Request* request, ::viewmatrix::Matrix* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetViewMatrix_, context, request, response, std::move(f));
}

void ViewTrans::Stub::experimental_async::GetViewMatrix(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viewmatrix::Matrix* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetViewMatrix_, context, request, response, std::move(f));
}

void ViewTrans::Stub::experimental_async::GetViewMatrix(::grpc::ClientContext* context, const ::viewmatrix::Request* request, ::viewmatrix::Matrix* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetViewMatrix_, context, request, response, reactor);
}

void ViewTrans::Stub::experimental_async::GetViewMatrix(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viewmatrix::Matrix* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetViewMatrix_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viewmatrix::Matrix>* ViewTrans::Stub::AsyncGetViewMatrixRaw(::grpc::ClientContext* context, const ::viewmatrix::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viewmatrix::Matrix>::Create(channel_.get(), cq, rpcmethod_GetViewMatrix_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viewmatrix::Matrix>* ViewTrans::Stub::PrepareAsyncGetViewMatrixRaw(::grpc::ClientContext* context, const ::viewmatrix::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viewmatrix::Matrix>::Create(channel_.get(), cq, rpcmethod_GetViewMatrix_, context, request, false);
}

ViewTrans::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ViewTrans_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ViewTrans::Service, ::viewmatrix::Request, ::viewmatrix::Matrix>(
          std::mem_fn(&ViewTrans::Service::GetViewMatrix), this)));
}

ViewTrans::Service::~Service() {
}

::grpc::Status ViewTrans::Service::GetViewMatrix(::grpc::ServerContext* context, const ::viewmatrix::Request* request, ::viewmatrix::Matrix* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace viewmatrix

