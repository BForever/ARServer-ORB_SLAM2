// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ARConnection.proto
#ifndef GRPC_ARConnection_2eproto__INCLUDED
#define GRPC_ARConnection_2eproto__INCLUDED

#include "ARConnection.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace ARConnection {

class ARConnectionService final {
 public:
  static constexpr char const* service_full_name() {
    return "ARConnection.ARConnectionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetViewMatrix(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::ARConnection::MatrixBlock* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ARConnection::MatrixBlock>> AsyncGetViewMatrix(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ARConnection::MatrixBlock>>(AsyncGetViewMatrixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ARConnection::MatrixBlock>> PrepareAsyncGetViewMatrix(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ARConnection::MatrixBlock>>(PrepareAsyncGetViewMatrixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::ARConnection::ImageBlock>> UploadImage(::grpc::ClientContext* context, ::ARConnection::Response* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::ARConnection::ImageBlock>>(UploadImageRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ARConnection::ImageBlock>> AsyncUploadImage(::grpc::ClientContext* context, ::ARConnection::Response* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ARConnection::ImageBlock>>(AsyncUploadImageRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ARConnection::ImageBlock>> PrepareAsyncUploadImage(::grpc::ClientContext* context, ::ARConnection::Response* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ARConnection::ImageBlock>>(PrepareAsyncUploadImageRaw(context, response, cq));
    }
    virtual ::grpc::Status RequestReset(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::ARConnection::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ARConnection::Response>> AsyncRequestReset(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ARConnection::Response>>(AsyncRequestResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ARConnection::Response>> PrepareAsyncRequestReset(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ARConnection::Response>>(PrepareAsyncRequestResetRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetViewMatrix(::grpc::ClientContext* context, const ::ARConnection::Request* request, ::ARConnection::MatrixBlock* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetViewMatrix(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ARConnection::MatrixBlock* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetViewMatrix(::grpc::ClientContext* context, const ::ARConnection::Request* request, ::ARConnection::MatrixBlock* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetViewMatrix(::grpc::ClientContext* context, const ::ARConnection::Request* request, ::ARConnection::MatrixBlock* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetViewMatrix(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ARConnection::MatrixBlock* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetViewMatrix(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ARConnection::MatrixBlock* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UploadImage(::grpc::ClientContext* context, ::ARConnection::Response* response, ::grpc::ClientWriteReactor< ::ARConnection::ImageBlock>* reactor) = 0;
      #else
      virtual void UploadImage(::grpc::ClientContext* context, ::ARConnection::Response* response, ::grpc::experimental::ClientWriteReactor< ::ARConnection::ImageBlock>* reactor) = 0;
      #endif
      virtual void RequestReset(::grpc::ClientContext* context, const ::ARConnection::Request* request, ::ARConnection::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestReset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ARConnection::Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RequestReset(::grpc::ClientContext* context, const ::ARConnection::Request* request, ::ARConnection::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RequestReset(::grpc::ClientContext* context, const ::ARConnection::Request* request, ::ARConnection::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RequestReset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ARConnection::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RequestReset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ARConnection::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ARConnection::MatrixBlock>* AsyncGetViewMatrixRaw(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ARConnection::MatrixBlock>* PrepareAsyncGetViewMatrixRaw(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::ARConnection::ImageBlock>* UploadImageRaw(::grpc::ClientContext* context, ::ARConnection::Response* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::ARConnection::ImageBlock>* AsyncUploadImageRaw(::grpc::ClientContext* context, ::ARConnection::Response* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::ARConnection::ImageBlock>* PrepareAsyncUploadImageRaw(::grpc::ClientContext* context, ::ARConnection::Response* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ARConnection::Response>* AsyncRequestResetRaw(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ARConnection::Response>* PrepareAsyncRequestResetRaw(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetViewMatrix(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::ARConnection::MatrixBlock* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ARConnection::MatrixBlock>> AsyncGetViewMatrix(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ARConnection::MatrixBlock>>(AsyncGetViewMatrixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ARConnection::MatrixBlock>> PrepareAsyncGetViewMatrix(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ARConnection::MatrixBlock>>(PrepareAsyncGetViewMatrixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::ARConnection::ImageBlock>> UploadImage(::grpc::ClientContext* context, ::ARConnection::Response* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::ARConnection::ImageBlock>>(UploadImageRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::ARConnection::ImageBlock>> AsyncUploadImage(::grpc::ClientContext* context, ::ARConnection::Response* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::ARConnection::ImageBlock>>(AsyncUploadImageRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::ARConnection::ImageBlock>> PrepareAsyncUploadImage(::grpc::ClientContext* context, ::ARConnection::Response* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::ARConnection::ImageBlock>>(PrepareAsyncUploadImageRaw(context, response, cq));
    }
    ::grpc::Status RequestReset(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::ARConnection::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ARConnection::Response>> AsyncRequestReset(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ARConnection::Response>>(AsyncRequestResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ARConnection::Response>> PrepareAsyncRequestReset(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ARConnection::Response>>(PrepareAsyncRequestResetRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetViewMatrix(::grpc::ClientContext* context, const ::ARConnection::Request* request, ::ARConnection::MatrixBlock* response, std::function<void(::grpc::Status)>) override;
      void GetViewMatrix(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ARConnection::MatrixBlock* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetViewMatrix(::grpc::ClientContext* context, const ::ARConnection::Request* request, ::ARConnection::MatrixBlock* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetViewMatrix(::grpc::ClientContext* context, const ::ARConnection::Request* request, ::ARConnection::MatrixBlock* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetViewMatrix(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ARConnection::MatrixBlock* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetViewMatrix(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ARConnection::MatrixBlock* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UploadImage(::grpc::ClientContext* context, ::ARConnection::Response* response, ::grpc::ClientWriteReactor< ::ARConnection::ImageBlock>* reactor) override;
      #else
      void UploadImage(::grpc::ClientContext* context, ::ARConnection::Response* response, ::grpc::experimental::ClientWriteReactor< ::ARConnection::ImageBlock>* reactor) override;
      #endif
      void RequestReset(::grpc::ClientContext* context, const ::ARConnection::Request* request, ::ARConnection::Response* response, std::function<void(::grpc::Status)>) override;
      void RequestReset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ARConnection::Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RequestReset(::grpc::ClientContext* context, const ::ARConnection::Request* request, ::ARConnection::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RequestReset(::grpc::ClientContext* context, const ::ARConnection::Request* request, ::ARConnection::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RequestReset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ARConnection::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RequestReset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ARConnection::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ARConnection::MatrixBlock>* AsyncGetViewMatrixRaw(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ARConnection::MatrixBlock>* PrepareAsyncGetViewMatrixRaw(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::ARConnection::ImageBlock>* UploadImageRaw(::grpc::ClientContext* context, ::ARConnection::Response* response) override;
    ::grpc::ClientAsyncWriter< ::ARConnection::ImageBlock>* AsyncUploadImageRaw(::grpc::ClientContext* context, ::ARConnection::Response* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::ARConnection::ImageBlock>* PrepareAsyncUploadImageRaw(::grpc::ClientContext* context, ::ARConnection::Response* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ARConnection::Response>* AsyncRequestResetRaw(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ARConnection::Response>* PrepareAsyncRequestResetRaw(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetViewMatrix_;
    const ::grpc::internal::RpcMethod rpcmethod_UploadImage_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestReset_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetViewMatrix(::grpc::ServerContext* context, const ::ARConnection::Request* request, ::ARConnection::MatrixBlock* response);
    virtual ::grpc::Status UploadImage(::grpc::ServerContext* context, ::grpc::ServerReader< ::ARConnection::ImageBlock>* reader, ::ARConnection::Response* response);
    virtual ::grpc::Status RequestReset(::grpc::ServerContext* context, const ::ARConnection::Request* request, ::ARConnection::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetViewMatrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetViewMatrix() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetViewMatrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetViewMatrix(::grpc::ServerContext* /*context*/, const ::ARConnection::Request* /*request*/, ::ARConnection::MatrixBlock* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetViewMatrix(::grpc::ServerContext* context, ::ARConnection::Request* request, ::grpc::ServerAsyncResponseWriter< ::ARConnection::MatrixBlock>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadImage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ARConnection::ImageBlock>* /*reader*/, ::ARConnection::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadImage(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::ARConnection::Response, ::ARConnection::ImageBlock>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestReset() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RequestReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestReset(::grpc::ServerContext* /*context*/, const ::ARConnection::Request* /*request*/, ::ARConnection::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestReset(::grpc::ServerContext* context, ::ARConnection::Request* request, ::grpc::ServerAsyncResponseWriter< ::ARConnection::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetViewMatrix<WithAsyncMethod_UploadImage<WithAsyncMethod_RequestReset<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetViewMatrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetViewMatrix() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ARConnection::Request, ::ARConnection::MatrixBlock>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ARConnection::Request* request, ::ARConnection::MatrixBlock* response) { return this->GetViewMatrix(context, request, response); }));}
    void SetMessageAllocatorFor_GetViewMatrix(
        ::grpc::experimental::MessageAllocator< ::ARConnection::Request, ::ARConnection::MatrixBlock>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ARConnection::Request, ::ARConnection::MatrixBlock>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetViewMatrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetViewMatrix(::grpc::ServerContext* /*context*/, const ::ARConnection::Request* /*request*/, ::ARConnection::MatrixBlock* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetViewMatrix(
      ::grpc::CallbackServerContext* /*context*/, const ::ARConnection::Request* /*request*/, ::ARConnection::MatrixBlock* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetViewMatrix(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ARConnection::Request* /*request*/, ::ARConnection::MatrixBlock* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UploadImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::ARConnection::ImageBlock, ::ARConnection::Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::ARConnection::Response* response) { return this->UploadImage(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ARConnection::ImageBlock>* /*reader*/, ::ARConnection::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::ARConnection::ImageBlock>* UploadImage(
      ::grpc::CallbackServerContext* /*context*/, ::ARConnection::Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::ARConnection::ImageBlock>* UploadImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::ARConnection::Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RequestReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RequestReset() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ARConnection::Request, ::ARConnection::Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ARConnection::Request* request, ::ARConnection::Response* response) { return this->RequestReset(context, request, response); }));}
    void SetMessageAllocatorFor_RequestReset(
        ::grpc::experimental::MessageAllocator< ::ARConnection::Request, ::ARConnection::Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ARConnection::Request, ::ARConnection::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RequestReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestReset(::grpc::ServerContext* /*context*/, const ::ARConnection::Request* /*request*/, ::ARConnection::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RequestReset(
      ::grpc::CallbackServerContext* /*context*/, const ::ARConnection::Request* /*request*/, ::ARConnection::Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RequestReset(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ARConnection::Request* /*request*/, ::ARConnection::Response* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetViewMatrix<ExperimentalWithCallbackMethod_UploadImage<ExperimentalWithCallbackMethod_RequestReset<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetViewMatrix<ExperimentalWithCallbackMethod_UploadImage<ExperimentalWithCallbackMethod_RequestReset<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetViewMatrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetViewMatrix() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetViewMatrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetViewMatrix(::grpc::ServerContext* /*context*/, const ::ARConnection::Request* /*request*/, ::ARConnection::MatrixBlock* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadImage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ARConnection::ImageBlock>* /*reader*/, ::ARConnection::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestReset() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RequestReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestReset(::grpc::ServerContext* /*context*/, const ::ARConnection::Request* /*request*/, ::ARConnection::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetViewMatrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetViewMatrix() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetViewMatrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetViewMatrix(::grpc::ServerContext* /*context*/, const ::ARConnection::Request* /*request*/, ::ARConnection::MatrixBlock* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetViewMatrix(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadImage() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ARConnection::ImageBlock>* /*reader*/, ::ARConnection::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadImage(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestReset() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RequestReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestReset(::grpc::ServerContext* /*context*/, const ::ARConnection::Request* /*request*/, ::ARConnection::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetViewMatrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetViewMatrix() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetViewMatrix(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetViewMatrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetViewMatrix(::grpc::ServerContext* /*context*/, const ::ARConnection::Request* /*request*/, ::ARConnection::MatrixBlock* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetViewMatrix(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetViewMatrix(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UploadImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->UploadImage(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ARConnection::ImageBlock>* /*reader*/, ::ARConnection::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* UploadImage(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* UploadImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RequestReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RequestReset() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestReset(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RequestReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestReset(::grpc::ServerContext* /*context*/, const ::ARConnection::Request* /*request*/, ::ARConnection::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RequestReset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RequestReset(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetViewMatrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetViewMatrix() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::ARConnection::Request, ::ARConnection::MatrixBlock>(std::bind(&WithStreamedUnaryMethod_GetViewMatrix<BaseClass>::StreamedGetViewMatrix, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetViewMatrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetViewMatrix(::grpc::ServerContext* /*context*/, const ::ARConnection::Request* /*request*/, ::ARConnection::MatrixBlock* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetViewMatrix(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ARConnection::Request,::ARConnection::MatrixBlock>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestReset() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ARConnection::Request, ::ARConnection::Response>(std::bind(&WithStreamedUnaryMethod_RequestReset<BaseClass>::StreamedRequestReset, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RequestReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestReset(::grpc::ServerContext* /*context*/, const ::ARConnection::Request* /*request*/, ::ARConnection::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ARConnection::Request,::ARConnection::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetViewMatrix<WithStreamedUnaryMethod_RequestReset<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetViewMatrix<WithStreamedUnaryMethod_RequestReset<Service > > StreamedService;
};

}  // namespace ARConnection


#endif  // GRPC_ARConnection_2eproto__INCLUDED
