// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ARConnection.proto

#include "ARConnection.pb.h"
#include "ARConnection.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ARConnection {

static const char* ARConnectionService_method_names[] = {
  "/ARConnection.ARConnectionService/GetViewMatrix",
  "/ARConnection.ARConnectionService/UploadImage",
  "/ARConnection.ARConnectionService/RequestReset",
  "/ARConnection.ARConnectionService/GetObjectList",
};

std::unique_ptr< ARConnectionService::Stub> ARConnectionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ARConnectionService::Stub> stub(new ARConnectionService::Stub(channel));
  return stub;
}

ARConnectionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetViewMatrix_(ARConnectionService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadImage_(ARConnectionService_method_names[1], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_RequestReset_(ARConnectionService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetObjectList_(ARConnectionService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ARConnectionService::Stub::GetViewMatrix(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::ARConnection::MatrixBlock* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetViewMatrix_, context, request, response);
}

void ARConnectionService::Stub::experimental_async::GetViewMatrix(::grpc::ClientContext* context, const ::ARConnection::Request* request, ::ARConnection::MatrixBlock* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetViewMatrix_, context, request, response, std::move(f));
}

void ARConnectionService::Stub::experimental_async::GetViewMatrix(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ARConnection::MatrixBlock* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetViewMatrix_, context, request, response, std::move(f));
}

void ARConnectionService::Stub::experimental_async::GetViewMatrix(::grpc::ClientContext* context, const ::ARConnection::Request* request, ::ARConnection::MatrixBlock* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetViewMatrix_, context, request, response, reactor);
}

void ARConnectionService::Stub::experimental_async::GetViewMatrix(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ARConnection::MatrixBlock* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetViewMatrix_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ARConnection::MatrixBlock>* ARConnectionService::Stub::AsyncGetViewMatrixRaw(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ARConnection::MatrixBlock>::Create(channel_.get(), cq, rpcmethod_GetViewMatrix_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ARConnection::MatrixBlock>* ARConnectionService::Stub::PrepareAsyncGetViewMatrixRaw(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ARConnection::MatrixBlock>::Create(channel_.get(), cq, rpcmethod_GetViewMatrix_, context, request, false);
}

::grpc::ClientWriter< ::ARConnection::ImageBlock>* ARConnectionService::Stub::UploadImageRaw(::grpc::ClientContext* context, ::ARConnection::Response* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::ARConnection::ImageBlock>::Create(channel_.get(), rpcmethod_UploadImage_, context, response);
}

void ARConnectionService::Stub::experimental_async::UploadImage(::grpc::ClientContext* context, ::ARConnection::Response* response, ::grpc::experimental::ClientWriteReactor< ::ARConnection::ImageBlock>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::ARConnection::ImageBlock>::Create(stub_->channel_.get(), stub_->rpcmethod_UploadImage_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::ARConnection::ImageBlock>* ARConnectionService::Stub::AsyncUploadImageRaw(::grpc::ClientContext* context, ::ARConnection::Response* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::ARConnection::ImageBlock>::Create(channel_.get(), cq, rpcmethod_UploadImage_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::ARConnection::ImageBlock>* ARConnectionService::Stub::PrepareAsyncUploadImageRaw(::grpc::ClientContext* context, ::ARConnection::Response* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::ARConnection::ImageBlock>::Create(channel_.get(), cq, rpcmethod_UploadImage_, context, response, false, nullptr);
}

::grpc::Status ARConnectionService::Stub::RequestReset(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::ARConnection::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestReset_, context, request, response);
}

void ARConnectionService::Stub::experimental_async::RequestReset(::grpc::ClientContext* context, const ::ARConnection::Request* request, ::ARConnection::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestReset_, context, request, response, std::move(f));
}

void ARConnectionService::Stub::experimental_async::RequestReset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ARConnection::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestReset_, context, request, response, std::move(f));
}

void ARConnectionService::Stub::experimental_async::RequestReset(::grpc::ClientContext* context, const ::ARConnection::Request* request, ::ARConnection::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestReset_, context, request, response, reactor);
}

void ARConnectionService::Stub::experimental_async::RequestReset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ARConnection::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RequestReset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ARConnection::Response>* ARConnectionService::Stub::AsyncRequestResetRaw(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ARConnection::Response>::Create(channel_.get(), cq, rpcmethod_RequestReset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ARConnection::Response>* ARConnectionService::Stub::PrepareAsyncRequestResetRaw(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ARConnection::Response>::Create(channel_.get(), cq, rpcmethod_RequestReset_, context, request, false);
}

::grpc::Status ARConnectionService::Stub::GetObjectList(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::ARConnection::ObjectInfoList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetObjectList_, context, request, response);
}

void ARConnectionService::Stub::experimental_async::GetObjectList(::grpc::ClientContext* context, const ::ARConnection::Request* request, ::ARConnection::ObjectInfoList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetObjectList_, context, request, response, std::move(f));
}

void ARConnectionService::Stub::experimental_async::GetObjectList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ARConnection::ObjectInfoList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetObjectList_, context, request, response, std::move(f));
}

void ARConnectionService::Stub::experimental_async::GetObjectList(::grpc::ClientContext* context, const ::ARConnection::Request* request, ::ARConnection::ObjectInfoList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetObjectList_, context, request, response, reactor);
}

void ARConnectionService::Stub::experimental_async::GetObjectList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ARConnection::ObjectInfoList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetObjectList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ARConnection::ObjectInfoList>* ARConnectionService::Stub::AsyncGetObjectListRaw(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ARConnection::ObjectInfoList>::Create(channel_.get(), cq, rpcmethod_GetObjectList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ARConnection::ObjectInfoList>* ARConnectionService::Stub::PrepareAsyncGetObjectListRaw(::grpc::ClientContext* context, const ::ARConnection::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ARConnection::ObjectInfoList>::Create(channel_.get(), cq, rpcmethod_GetObjectList_, context, request, false);
}

ARConnectionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ARConnectionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ARConnectionService::Service, ::ARConnection::Request, ::ARConnection::MatrixBlock>(
          std::mem_fn(&ARConnectionService::Service::GetViewMatrix), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ARConnectionService_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< ARConnectionService::Service, ::ARConnection::ImageBlock, ::ARConnection::Response>(
          std::mem_fn(&ARConnectionService::Service::UploadImage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ARConnectionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ARConnectionService::Service, ::ARConnection::Request, ::ARConnection::Response>(
          std::mem_fn(&ARConnectionService::Service::RequestReset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ARConnectionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ARConnectionService::Service, ::ARConnection::Request, ::ARConnection::ObjectInfoList>(
          std::mem_fn(&ARConnectionService::Service::GetObjectList), this)));
}

ARConnectionService::Service::~Service() {
}

::grpc::Status ARConnectionService::Service::GetViewMatrix(::grpc::ServerContext* context, const ::ARConnection::Request* request, ::ARConnection::MatrixBlock* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ARConnectionService::Service::UploadImage(::grpc::ServerContext* context, ::grpc::ServerReader< ::ARConnection::ImageBlock>* reader, ::ARConnection::Response* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ARConnectionService::Service::RequestReset(::grpc::ServerContext* context, const ::ARConnection::Request* request, ::ARConnection::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ARConnectionService::Service::GetObjectList(::grpc::ServerContext* context, const ::ARConnection::Request* request, ::ARConnection::ObjectInfoList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ARConnection

